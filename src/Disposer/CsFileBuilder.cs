using System.CodeDom.Compiler;

namespace Disposer;

public sealed class CsFileBuilder : ICsFileBuilder
{
    private bool isFileScoped;
    private readonly StringWriter stringWriter;
    private readonly IndentedTextWriter indentedTextWriter;

    public CsFileBuilder()
    {
        stringWriter = new();
        indentedTextWriter = new IndentedTextWriter(stringWriter);
    }

    public ICsFileBuilder AddUsing(string usingStatement)
    {
        indentedTextWriter.WriteLine($"using {usingStatement};");
        return this;
    }

    public ICsFileBuilder AddStaticUsing(string usingStatement)
    {
        indentedTextWriter.WriteLine($"using static {usingStatement};");
        return this;
    }

    public ICsFileBuilder AddNamespace(string namespaceName, bool condition)
    {
        if (condition is false)
            return this;

        indentedTextWriter.WriteLine($"namespace {namespaceName}");
        GoOneLevelInside();
        return this;
    }

    public ICsFileBuilder AddFileScopedNamespace(string namespaceName, bool condition)
    {
        if (condition is false)
            return this;

        isFileScoped = true;
        indentedTextWriter.WriteLine($"namespace {namespaceName};");
        return this;
    }

    public ICsFileBuilder AddStatementAndStartBlock(string line)
    {
        indentedTextWriter.WriteLine(line);
        GoOneLevelInside();

        return this;
    }

    public ICsFileBuilder AddStatements(params string[] lines)
    {
        foreach (string line in lines)
            indentedTextWriter.WriteLine(line);

        return this;
    }

    public ICsFileBuilder AddStatementsIf(bool condition, params string[] lines)
    {
        if (condition is false)
            return this;

        foreach (string line in lines)
            indentedTextWriter.WriteLine(line);

        return this;
    }

    public ICsFileBuilder AddEmptyLine(bool condition = true)
    {
        if (condition is false)
            return this;

        indentedTextWriter.WriteLine();
        return this;
    }

    public ICsFileBuilder AddCommentLine(string line)
    {
        indentedTextWriter.WriteLine("//" + line);
        return this;
    }

    public ICsFileBuilder EndBlock()
    {
        GoOneLevelOutside();
        return this;
    }

    public ICsFileBuilder EndNamespace()
    {
        if (isFileScoped)
            return this;

        GoOneLevelOutside();
        return this;
    }

    public ICsFileBuilder AddIfBlock(string condition, params string[] lines)
    {
        AddStatementAndStartBlock($"if ({condition})");
        AddStatements(lines);
        GoOneLevelOutside();

        return this;
    }

    public ICsFileBuilder AddAutoGeneratedHeader(string by)
    {
        AddStatements("//------------------------------------------------------------------------------",
                        "// <auto-generated>",
                       $"//     This code was generated by the {by} source generator",
                        "//     Changes to this file may cause incorrect behavior and will be lost if",
                        "//     the code is regenerated.",
                        "// </auto-generated>",
                        "//------------------------------------------------------------------------------");
        return this;
    }

    private void GoOneLevelInside()
    {
        indentedTextWriter.WriteLine("{");
        indentedTextWriter.Indent++;
    }

    private void GoOneLevelOutside()
    {
        indentedTextWriter.Indent--;
        indentedTextWriter.WriteLine("}");
    }

    public string Build() =>
        stringWriter.ToString();

    public override string ToString()
    {
        return indentedTextWriter.ToString();
    }

    public void Dispose()
    {
        indentedTextWriter?.Dispose();
        stringWriter?.Dispose();
    }
}
